{% if summary %}
<!-- Key Metrics Summary Cards -->
<div class="stats-grid fade-in">
    <div class="stat-card">
        <div class="stat-value">{{ summary.age | round(1) }}</div>
        <div class="stat-label">
            <i class="fas fa-user me-1"></i>
            Current Age (years)
        </div>
    </div>

    <div class="stat-card">
        <div class="stat-value">{{ summary.fire_age | round(1) }}</div>
        <div class="stat-label">
            <i class="fas fa-calendar-check me-1"></i>
            FIRE Age (years)
        </div>
    </div>

    <div class="stat-card">
        <div class="stat-value">{{ summary.years_till_fi | round(1) }}</div>
        <div class="stat-label">
            <i class="fas fa-clock me-1"></i>
            Years to FIRE
        </div>
    </div>

    <div class="stat-card">
        <div class="stat-value">${{ (summary.nw_at_fi / 1e6) | round(2) }}M</div>
        <div class="stat-label">
            <i class="fas fa-piggy-bank me-1"></i>
            Net Worth at FIRE
        </div>
    </div>
</div>

<!-- Detailed Summary Table -->
<div class="table-container fade-in">
    <div class="chart-title">
        <i class="fas fa-chart-bar me-2"></i>
        Detailed Financial Projections
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th><i class="fas fa-info-circle me-1"></i>Metric</th>
                <th><i class="fas fa-dollar-sign me-1"></i>Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <strong>FIRE Date</strong>
                    <br><small class="text-muted">When you can retire</small>
                </td>
                <td>
                    <span class="badge bg-primary fs-6">{{ summary.fire_date }}</span>
                </td>
            </tr>
            <tr>
                <td>
                    <strong>Total Saved</strong>
                    <br><small class="text-muted">Amount you'll save by FIRE</small>
                </td>
                <td>
                    <span class="text-success fw-bold">${{ (summary.total_saved / 1e6) | round(2) }}M</span>
                </td>
            </tr>
            <tr>
                <td>
                    <strong>Investment Profits</strong>
                    <br><small class="text-muted">Growth from investments</small>
                </td>
                <td>
                    <span class="text-info fw-bold">${{ (summary.total_investment_profits / 1e6) | round(2) }}M</span>
                </td>
            </tr>
            <tr>
                <td>
                    <strong>Monthly Safe Withdrawal</strong>
                    <br><small class="text-muted">What you can withdraw monthly at FIRE</small>
                </td>
                <td>
                    <span class="text-warning fw-bold">${{ (summary.safe_withdraw_at_fi / 1000) | int }}k</span>
                </td>
            </tr>
            <tr>
                <td>
                    <strong>Monthly Spending at FIRE</strong>
                    <br><small class="text-muted">Your expenses at retirement (inflation-adjusted)</small>
                </td>
                <td>
                    <span class="text-secondary fw-bold">${{ (summary.spending_at_fi / 1000) | int }}k</span>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<!-- Age-based Projections -->
{% set age_projections = [] %}
{% for age in [35, 40, 45, 50, 55] %}
    {% if age in summary.safe_withdraw_at_age %}
        {% set _ = age_projections.append((age, summary.safe_withdraw_at_age[age])) %}
    {% endif %}
{% endfor %}

{% if age_projections %}
<div class="card fade-in">
    <div class="card-header">
        <i class="fas fa-timeline me-2"></i>
        Safe Withdrawal by Age
    </div>
    <div class="card-body">
        <div class="row">
            {% for age, amount in age_projections %}
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="stat-card">
                    <div class="stat-value">{{ format_currency(amount) }}</div>
                    <div class="stat-label">
                        <i class="fas fa-birthday-cake me-1"></i>
                        At Age {{ age }}
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>
{% endif %}

<!-- Extra Spending Impact -->
<div class="card fade-in mt-4">
    <div class="card-header">
        <i class="fas fa-credit-card me-2"></i>
        Impact of Extra Spending
    </div>
    <div class="card-body">
        {% if extra_spending > 0 %}
            {% if time_difference %}
                <div class="alert alert-warning">
                    <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-exclamation-triangle me-2 fs-4"></i>
                        <h6 class="mb-0">Spending Impact Analysis</h6>
                    </div>
                    {% set total_days = (time_difference * 365.25) | round | int %}
                    <p class="mb-2">
                        <strong>Extra Spending:</strong> ${{ "{:,}".format(extra_spending) }}
                    </p>
                    <p class="mb-2">
                        <strong>Delay to FIRE Date:</strong>
                        {% if total_days >= 365 %}
                            {% set years = (total_days / 365.25) | round(2) %}
                            <span class="text-danger fw-bold">{{ years }} year{% if years != 1 %}s{% endif %}</span>
                        {% elif total_days >= 30 %}
                            {% set months = (total_days / 30.44) | round(2) %}
                            <span class="text-warning fw-bold">{{ months }} month{% if months != 1 %}s{% endif %}</span>
                        {% else %}
                            <span class="text-info fw-bold">{{ total_days }} day{% if total_days != 1 %}s{% endif %}</span>
                        {% endif %}
                    </p>
                    {% if summary_with_extra %}
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <small class="text-muted">Original FIRE Date:</small>
                            <br><span class="badge bg-success">{{ summary.fire_date }}</span>
                        </div>
                        <div class="col-md-6">
                            <small class="text-muted">New FIRE Date:</small>
                            <br><span class="badge bg-danger">{{ summary_with_extra.fire_date }}</span>
                        </div>
                    </div>
                    {% endif %}
                </div>
            {% else %}
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Extra spending of ${{ "{:,}".format(extra_spending) }} entered, but it doesn't significantly affect your FIRE date.
                </div>
            {% endif %}
        {% else %}
            <div class="alert alert-secondary">
                <i class="fas fa-calculator me-2"></i>
                No extra spending entered. Use this field to see how large purchases might affect your FIRE timeline.
            </div>
        {% endif %}
    </div>
</div>

{% elif results %}
<div class="alert alert-danger fade-in" role="alert">
    <div class="d-flex align-items-center mb-3">
        <i class="fas fa-train fs-1 me-3"></i>
        <div>
            <h4 class="alert-heading mb-2">All Aboard the Neverending Work Train! ðŸš‚</h4>
            <p class="mb-0">
                Uh-oh! Based on your current financial plan, you might be on the express route to working forever!
                Don't worry though - let's get you on the FIRE Express instead! ðŸ”¥
            </p>
        </div>
    </div>
    <hr>
    <div class="row">
        <div class="col-md-6">
            <h6><i class="fas fa-lightbulb me-2"></i>Quick Fixes:</h6>
            <ul class="mb-0">
                <li>Increase your savings rate</li>
                <li>Reduce monthly expenses</li>
                <li>Look for additional income sources</li>
            </ul>
        </div>
        <div class="col-md-6">
            <h6><i class="fas fa-chart-line me-2"></i>Long-term Strategies:</h6>
            <ul class="mb-0">
                <li>Invest in higher-growth assets</li>
                <li>Consider career advancement</li>
                <li>Optimize your investment portfolio</li>
            </ul>
        </div>
    </div>
</div>
{% endif %}

{% if results %}
<!-- Interactive Charts Section -->
<div class="section-spacing">
    <h3 class="text-gradient text-center mb-4">
        <i class="fas fa-chart-area me-2"></i>
        Interactive Financial Projections
    </h3>

    <div class="row g-4">
        <div class="col-12">
            <div class="chart-container fade-in">
                <div class="chart-title">Net Worth Growth Over Time</div>
                <small class="text-muted mb-2 d-block text-center">
                    <i class="fas fa-info-circle me-1"></i>
                    Drag to select range â€¢ Double-click to reset zoom
                </small>
                <div id="age-vs-net-worth-plot"></div>
            </div>
        </div>

        <div class="col-12">
            <div class="chart-container fade-in">
                <div class="chart-title">Monthly Financial Flows</div>
                <small class="text-muted mb-2 d-block text-center">
                    <i class="fas fa-info-circle me-1"></i>
                    Drag to select range â€¢ Double-click to reset zoom
                </small>
                <div id="monthly-financial-flows-plot"></div>
            </div>
        </div>
    </div>
</div>

<!-- Detailed Data Table -->
<div class="table-container fade-in">
    <div class="chart-title">
        <i class="fas fa-table me-2"></i>
        Detailed Monthly Projections
    </div>
    <div class="scrollable-table">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th><i class="fas fa-calendar me-1"></i>Months</th>
                    <th><i class="fas fa-calendar-alt me-1"></i>Years</th>
                    <th><i class="fas fa-user me-1"></i>Age</th>
                    <th><i class="fas fa-chart-pie me-1"></i>Net Worth</th>
                    <th><i class="fas fa-arrow-up me-1"></i>NW Change</th>
                    <th><i class="fas fa-piggy-bank me-1"></i>Saving</th>
                    <th><i class="fas fa-money-bill-wave me-1"></i>Income</th>
                    <th><i class="fas fa-chart-line me-1"></i>Investment Profits</th>
                    <th><i class="fas fa-coins me-1"></i>Total Saved</th>
                    <th><i class="fas fa-trending-up me-1"></i>Total Profits</th>
                    <th><i class="fas fa-shopping-cart me-1"></i>Spending</th>
                    <th><i class="fas fa-shield-alt me-1"></i>Safe Withdraw</th>
                    <th><i class="fas fa-balance-scale me-1"></i>Safe - Spending</th>
                </tr>
            </thead>
            <tbody>
                {% for result in results %}
                <tr>
                    <td>{{ result.months }}</td>
                    <td>{{ result.years | round(1) }}</td>
                    <td>{{ result.age | round(1) }}</td>
                    <td>{{ format_currency(result.nw) }}</td>
                    <td class="{% if result.delta_nw > 0 %}text-success{% else %}text-danger{% endif %}">
                        {{ format_currency(result.delta_nw) }}
                    </td>
                    <td class="text-info">{{ format_currency(result.saving) }}</td>
                    <td>{{ format_currency(result.income) }}</td>
                    <td class="text-success">{{ format_currency(result.investment_profits) }}</td>
                    <td>{{ format_currency(result.total_saved) }}</td>
                    <td class="text-primary">{{ format_currency(result.total_investment_profits) }}</td>
                    <td class="text-warning">{{ format_currency(result.spending) }}</td>
                    <td>{{ format_currency(result.safe_withdraw_rule_monthly) }}</td>
                    <td style="background-color: {{ interpolate_color(result.safe_withdraw_minus_spending) }}" class="fw-bold">
                        {{ format_currency(result.safe_withdraw_minus_spending) }}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<!-- Render Charts -->
<script>
    // Store chart instances for theme switching
    let chartInstances = {
        netWorth: null,
        monthlyFlows: null
    };

    // Function to get current theme
    function getCurrentTheme() {
        return document.documentElement.getAttribute('data-bs-theme') || 'light';
    }

    // Function to get theme-appropriate colors
    function getThemeColors(theme) {
        const isDark = theme === 'dark';
        return {
            background: isDark ? '#2c2c2c' : '#ffffff',
            foreground: isDark ? '#ecf0f1' : '#2c3e50',
            gridColor: isDark ? '#404040' : '#e9ecef',
            tooltipBg: isDark ? '#404040' : '#ffffff',
            tooltipColor: isDark ? '#ecf0f1' : '#2c3e50'
        };
    }

    // Function to create ApexCharts configuration
    function createChartConfig(title, yAxisTitle, chartData, theme) {
        const colors = getThemeColors(theme);

        const config = {
            series: chartData.series,
            chart: {
                type: 'area',
                stacked: false,
                height: 350,
                background: colors.background,
                foreColor: colors.foreground,
                zoom: {
                    type: 'x',
                    enabled: true,
                    autoScaleYaxis: true
                },
                toolbar: {
                    show: false
                },
                animations: {
                    enabled: true,
                    easing: 'easeinout',
                    speed: 800
                }
            },
            dataLabels: {
                enabled: false
            },
            markers: {
                size: 0,
            },
            fill: {
                type: 'gradient',
                gradient: {
                    shadeIntensity: 1,
                    inverseColors: false,
                    opacityFrom: 0.5,
                    opacityTo: 0,
                    stops: [0, 90, 100]
                },
            },
            colors: ['#ff6b35', '#6c5ce7', '#00b894', '#e17055', '#0984e3'],
            stroke: {
                curve: 'smooth',
                width: 2
            },
            grid: {
                borderColor: colors.gridColor,
                strokeDashArray: 0,
                xaxis: {
                    lines: {
                        show: true
                    }
                },
                yaxis: {
                    lines: {
                        show: true
                    }
                }
            },
            xaxis: {
                type: 'datetime',
                title: {
                    text: 'Date',
                    style: {
                        color: colors.foreground
                    }
                },
                labels: {
                    style: {
                        colors: colors.foreground
                    }
                }
            },
            yaxis: {
                title: {
                    text: yAxisTitle,
                    style: {
                        color: colors.foreground
                    }
                },
                labels: {
                    style: {
                        colors: colors.foreground
                    },
                    formatter: function (val) {
                        return '$' + val.toLocaleString();
                    }
                }
            },
            tooltip: {
                theme: theme,
                shared: false,
                style: {
                    fontSize: '12px',
                    color: colors.tooltipColor
                },
                y: {
                    formatter: function (val) {
                        return '$' + val.toLocaleString();
                    }
                }
            },
            legend: {
                position: 'top',
                horizontalAlign: 'left',
                labels: {
                    colors: colors.foreground
                }
            }
        };

        // Add FIRE date vertical line if available
        if (chartData.fire_date) {
            config.annotations = {
                xaxis: [{
                    x: new Date(chartData.fire_date).getTime(),
                    borderColor: colors.foreground,
                    strokeDashArray: 5,
                    label: {
                        text: 'FIRE Date',
                        style: {
                            color: colors.foreground,
                            background: colors.background
                        }
                    }
                }]
            };
        }

        return config;
    }

    // Function to render all charts
    function renderCharts() {
        const theme = getCurrentTheme();
        console.log('Rendering charts with theme:', theme);

        try {
            // Check if chart containers exist
            const netWorthContainer = document.querySelector("#age-vs-net-worth-plot");
            const flowsContainer = document.querySelector("#monthly-financial-flows-plot");

            if (!netWorthContainer || !flowsContainer) {
                console.error('Chart containers not found:', {
                    netWorth: !!netWorthContainer,
                    flows: !!flowsContainer
                });
                return;
            }

            // Net Worth Chart
            if (chartInstances.netWorth) {
                chartInstances.netWorth.destroy();
                chartInstances.netWorth = null;
            }

            const netWorthData = {{ age_vs_net_worth_plot| tojson | safe }};
            console.log('Net Worth Data:', netWorthData);

            if (netWorthData && netWorthData.series && netWorthData.series.length > 0) {
                const netWorthConfig = createChartConfig('Net Worth Growth', 'Amount ($)', netWorthData, theme);
                chartInstances.netWorth = new ApexCharts(netWorthContainer, netWorthConfig);
                chartInstances.netWorth.render().then(() => {
                    console.log('Net Worth chart rendered successfully');
                    // Add double-click to reset zoom
                    netWorthContainer.addEventListener('dblclick', function() {
                        chartInstances.netWorth.resetSeries();
                        const dates = netWorthData.series[0].data.map(d => new Date(d.x).getTime());
                        chartInstances.netWorth.zoomX(
                            Math.min(...dates),
                            Math.max(...dates)
                        );
                    });
                }).catch((error) => {
                    console.error('Error rendering Net Worth chart:', error);
                });
            } else {
                console.warn('Net Worth chart data is invalid or empty');
            }

            // Monthly Financial Flows Chart
            if (chartInstances.monthlyFlows) {
                chartInstances.monthlyFlows.destroy();
                chartInstances.monthlyFlows = null;
            }

            const flowsData = {{ monthly_financial_flows_plot| tojson | safe }};
            console.log('Monthly Financial Flows Data:', flowsData);

            if (flowsData && flowsData.series && flowsData.series.length > 0) {
                const flowsConfig = createChartConfig('Monthly Financial Flows', 'Monthly Amount ($)', flowsData, theme);
                chartInstances.monthlyFlows = new ApexCharts(flowsContainer, flowsConfig);
                chartInstances.monthlyFlows.render().then(() => {
                    console.log('Monthly Financial Flows chart rendered successfully');
                    // Add double-click to reset zoom
                    flowsContainer.addEventListener('dblclick', function() {
                        chartInstances.monthlyFlows.resetSeries();
                        const dates = flowsData.series[0].data.map(d => new Date(d.x).getTime());
                        chartInstances.monthlyFlows.zoomX(
                            Math.min(...dates),
                            Math.max(...dates)
                        );
                    });
                }).catch((error) => {
                    console.error('Error rendering Monthly Financial Flows chart:', error);
                });
            } else {
                console.warn('Monthly Financial Flows chart data is invalid or empty');
            }

        } catch (error) {
            console.error('Error in renderCharts function:', error);
        }
    }

    // Expose chart rendering function globally
    window.renderChartsFromMain = renderCharts;

    // Function to safely render charts with retry mechanism
    function safeRenderCharts() {
        // Wait a bit for the DOM to be fully ready
        setTimeout(() => {
            renderCharts();
        }, 100);
    }

    // Initial chart rendering with delay for HTMX content
    safeRenderCharts();

    // Set up theme change monitoring
    function setupThemeMonitoring() {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'data-bs-theme') {
                    console.log('Theme changed, re-rendering charts');
                    renderCharts();
                }
            });
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-bs-theme']
        });

        window.addEventListener('storage', function(e) {
            if (e.key === 'theme') {
                console.log('Theme changed via storage, re-rendering charts');
                renderCharts();
            }
        });
    }

    // Setup theme monitoring immediately
    setupThemeMonitoring();

    console.log('Chart rendering script loaded');
</script>
{% endif %}
